<?php
App::uses('AppController', 'Controller');
/**
 * Orders Controller
 *
 * @property Order $Order
 * @property PaginatorComponent $Paginator
 */
class OrdersController extends AppController {

/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->Order->recursive = 0;
		$this->set('orders', $this->Paginator->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Order->exists($id)) {
			throw new NotFoundException(__('Invalid order'));
		}
		$options = array('conditions' => array('Order.' . $this->Order->primaryKey => $id));
		$this->set('order', $this->Order->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Order->create();
                        $this->request->data['Order']['operador'] = $this->Auth->user('id');
			if ($this->Order->save($this->request->data)) {
				$this->Session->setFlash(__('The order has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The order could not be saved. Please, try again.'));
			}
		}
		$clients = $this->Order->Client->find('list');
                $usuario = $this->Auth->user('type');
                $userid = $this->Auth->user('id');
                if ($usuario === 'Superusuario' || $usuario === 'Administrador'){
                    $companies = $this->Order->Company->find('list');
                }
                else{
                    $this->loadModel('Company'); 
                    $companies = $this->Company->getCompaniesByUserId($userid);
                }
                $distribuidors = $this->Order->distribuidor->find('list', array('conditions' => array('distribuidor.type' => 'Distribuidor')));
		$this->set(compact('clients', 'companies', 'operadors', 'distribuidors'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Order->exists($id)) {
			throw new NotFoundException(__('Invalid order'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->Order->save($this->request->data)) {
				$this->Session->setFlash(__('The order has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The order could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Order.' . $this->Order->primaryKey => $id));
			$this->request->data = $this->Order->find('first', $options);
		}
		$clients = $this->Order->Client->find('list');
		$companies = $this->Order->Company->find('list');
		$this->set(compact('clients', 'companies'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		$this->Order->id = $id;
		if (!$this->Order->exists()) {
			throw new NotFoundException(__('Invalid order'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->Order->delete()) {
			$this->Session->setFlash(__('The order has been deleted.'));
		} else {
			$this->Session->setFlash(__('The order could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
        
        public function isAuthorized($user) {
            // All registered users can add posts
            if (in_array($this->action, array('add', 'edit', 'delete'))) {
                //$usuario = $this->request->params['pass'][0];
                //if ($this->Auth->user('id') === $usuario){
                    return true;
                //}
            }

            // The owner of a post can edit and delete it
            //if (in_array($this->action, array('edit', 'delete'))) {
            //    $postId = (int) $this->request->params['pass'][0];
            //    if ($this->Post->isOwnedBy($postId, $user['id'])) {
            //        return true;
            //    }
            //}

            return parent::isAuthorized($user);
        }
}
